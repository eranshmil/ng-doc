@import 'colors';

@mixin ng-doc-font() {
	font-family: var(--ng-doc-font-family);
	font-variant: no-contextual;
	color: var(--ng-doc-text);
	line-height: var(--ng-doc-line-height);
	font-size: var(--ng-doc-font-size);
	font-weight: var(--ng-doc-font-weight);
}

@mixin ng-doc-heading-font() {
	font-family: var(--ng-doc-heading-font-family);
	font-variant: no-contextual;
	color: var(--ng-doc-text);
	line-height: var(--ng-doc-line-height);
	font-size: var(--ng-doc-font-size);
	font-weight: var(--ng-doc-font-weight);
}

@mixin ng-doc-backdrop-filter($base-color: var(--ng-doc-base-0), $disableSelector: ':empty') {
	&:not(#{$disableSelector}) {
		@include alpha-background($base-color, 0.6);
		backdrop-filter: blur(20px);
	}

	@supports not ((-webkit-backdrop-filter: none) or (backdrop-filter: none)) {
		& {
			background-color: $base-color;
		}
	}

	&#{$disableSelector} {
		background-color: $base-color;
	}
}

@mixin alpha-background($color, $alpha) {
	& {
		position: relative;

		&:before {
			content: '';
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			background-color: $color;
			opacity: $alpha;
			border-radius: inherit;
			overflow: hidden;
			pointer-events: none;
		}
	}
}

@mixin alpha-border($color, $alpha, $width: 1px) {
	& {
		position: relative;

		&:after {
			content: '';
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			border: $width solid $color;
			opacity: $alpha;
			border-radius: inherit;
			overflow: hidden;
			pointer-events: none;
		}
	}
}

@mixin forEachColor($skip...) {
	@each $color, $value in $colors {
		@if not index($skip, $color) {
			&[data-ng-doc-color='#{$color}'] {
				@content (map-get($value, 'background'), map-get($value, 'color'));
			}
		}
	}
}
